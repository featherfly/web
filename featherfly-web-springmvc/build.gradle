apply plugin: "java"
apply plugin: "ivy-publish"
apply plugin: 'maven'  
apply plugin: "maven-publish"
apply plugin: 'eclipse'

sourceCompatibility = 1.7  
targetCompatibility = 1.7  

archivesBaseName=projectName

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}
sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
}

ext {
	compileDependencies =[
		'org.springframework:spring-web:4.1.6.RELEASE'
		,'org.springframework:spring-webmvc:4.1.6.RELEASE'
    	,'cn.featherfly:featherfly-web:1.1.1'
		]
	publishRepo = ant.properties['user.home'] + "/.repository/ivy2/gradle_publish"
}

repositories {
	mavenCentral()
	maven {
		url  ant.properties['user.home'] +  "/.m2/repository"
	}
}

task sourcesJar(type: Jar) {
	classifier "sources"
    from sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn:javadoc) { 
     classifier = "javadoc"
     from javadoc.destinationDir 
}

artifacts {  
    archives jar  
    archives javadocJar  
    archives sourcesJar  
}  
 
publishing {
    publications {
        mavenJava(MavenPublication) {
        	from components.java
            artifact (sourcesJar) {
             	classifier "sources"
            }
			artifact (javadocJar) {
				classifier "javadoc"
			}
        }
    }    
}
dependencies {
	for (def depend : compileDependencies)  {
		compile (depend)
	}
    testCompile (
    	'org.testng:testng:6.8.8'
    )
}
/*
test {
    useTestNG()
    testLogging.showStandardStreams = true
    minHeapSize = "128m"
    maxHeapSize = "512m"
    jvmArgs '-XX:MaxPermSize=256m'
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
*/
jar {
    manifest.attributes buildBy: "zhong ji"
    manifest.attributes provider: "gradle"
}